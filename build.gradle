plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.8.0'
	id 'maven-publish'
}

version project.mod_version + "+mc.$minecraft_version"
group project.maven_group

repositories {
    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://kneelawk.com/maven/" }
    maven { url "https://maven.alexiil.uk/" }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.terraformersmc.com" }
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    // Mixin Extras
    include(annotationProcessor(implementation("com.github.LlamaLad7.mixinextras:mixinextras-fabric:$mixin_extras_version")))

    // Core apis for the mod
    modImplementation include("eu.pb4:polymer-core:$polymer_version")
    modImplementation include("eu.pb4:polymer-virtual-entity:$polymer_version")
    modImplementation include("eu.pb4:polymer-networking:$polymer_version")
    modImplementation include("xyz.nucleoid:server-translations-api:$server_translation_api_version")
    modImplementation include("teamreborn:energy:$energy_version")
    modImplementation include("com.kneelawk:graphlib:$graphlib_version")
    modImplementation annotationProcessor(include("com.github.mattidragon:ConfigToolkit:$configtoolkit_version"))

    // Config
    modImplementation include("dev.isxander.yacl:yet-another-config-lib-fabric:$yacl_version")
    modImplementation "com.terraformersmc:modmenu:$modmenu_version"

    // Tech reborn for testing
/*    modRuntimeOnly("TechReborn:TechReborn-1.20:5.8.1") {
        exclude group: "me.shedaniel", module: "RoughlyEnoughItems-fabric" // Skip transitive runtime dependency on REI
    }*/

    // Add generated data to runtime classpath (slightly hacky)
    runtimeOnly files("src/main/generated")
}

loom {
    splitEnvironmentSourceSets()
    getAccessWidenerPath().set file("src/main/resources/power_networks.accesswidener")

    mods {
        "power_networks" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
            modFiles.from file("src/main/generated")
        }
    }

    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=power_networks"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated true
 
            runDir "build/datagen"
        }
    }
}

// Delete datagen on clean
clean.delete("src/main/generated")

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release.set 17
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

java {
    archivesBaseName = project.archives_base_name
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

    // Copy datagen to jar
    dependsOn tasks.runDatagen
    from("src/main/generated") {
        exclude "README.md"
        exclude ".cache"
    }
}
